# Task-Rule Mapping Matrix
# Maps tasks to relevant rules based on metadata and tags
# Used by task-analysis.md to recommend appropriate rules for each task type

rules:
  # Core Rules
  core/metacognition:
    path: ".agents/rules/core/metacognition.md"
    tags: [self-assessment, reflection, decision-checkpoint, quality-control]
    when_to_load:
      - "Task type changes (e.g., from design to implementation)"
      - "Unexpected errors occur repeatedly"
      - "Completing a meaningful unit of work"
      - "Before starting new implementation"
    typical_tasks: [all]
    size: small
    priority: always
    description: "Self-assessment and reflection protocols for maintaining quality"

  core/ai-development-guide:
    path: ".agents/rules/core/ai-development-guide.md"
    tags: [anti-patterns, debugging, best-practices, rule-of-three, technical-debt]
    when_to_load:
      - "Starting new implementation"
      - "Code review and refactoring"
      - "Debugging complex issues"
      - "Technical decision making"
    typical_tasks: [implementation, debugging, refactoring]
    size: medium
    priority: high
    description: "Anti-patterns, debugging techniques, and development best practices"

  core/documentation-criteria:
    path: ".agents/rules/core/documentation-criteria.md"
    tags: [documentation, adr, design-doc, decision-matrix, scale-assessment]
    when_to_load:
      - "Task scale assessment (Small/Medium/Large)"
      - "Architecture decisions needed"
      - "Creating technical documentation"
      - "New feature planning"
    typical_tasks: [design, documentation, planning]
    size: medium
    priority: medium
    description: "Criteria for when and how to create documentation"

  # Language Rules (currently TypeScript, but concepts are universal)
  language/rules:
    path: ".agents/rules/language/rules.md"
    tags: [implementation, coding-style, type-safety, error-handling, refactoring, clean-code, solid-principles]
    when_to_load:
      - "Writing or modifying code"
      - "Code review"
      - "Refactoring existing code"
      - "Implementing new features"
    typical_tasks: [implementation, refactoring]
    size: large
    priority: high
    description: "Language-specific coding standards and best practices"
    universal_concepts:
      - "YAGNI principle"
      - "DRY principle"
      - "Error handling patterns"
      - "Dependency injection"
      - "Clean code principles"
      - "Type/static safety (for typed languages)"
      - "Async/concurrent programming patterns"
      - "Function composition over classes"

  language/testing:
    path: ".agents/rules/language/testing.md"
    tags: [testing, tdd, quality-assurance, coverage, unit-tests, integration-tests, verify-phase, test-skeleton]
    when_to_load:
      - "Writing tests"
      - "Bug fixing (test-first)"
      - "Quality checks"
      - "Refactoring (ensuring safety)"
      - "VERIFY phase execution (mandatory)"
      - "Test skeleton generation from acceptance criteria"
    typical_tasks: [implementation, debugging, quality-check, test_generation]
    size: medium
    priority: always
    description: "Testing standards, TDD practices, and mandatory quality checks"
    universal_concepts:
      - "Red-Green-Refactor cycle"
      - "Test independence"
      - "AAA pattern (Arrange-Act-Assert)"
      - "Coverage requirements (70%+)"
      - "Mock/stub patterns"
      - "Unit vs Integration testing"
      - "Test-first development"

  contextual/architecture/implementation-approach:
    path: ".agents/rules/contextual/architecture/implementation-approach.md"
    tags: [strategy-selection, task-decomposition, verification-levels, integration-points]
    when_to_load:
      - "Medium/Large scale tasks (3+ files)"
      - "Implementation strategy selection"
      - "Task breakdown and planning"
      - "Choosing between vertical/horizontal slicing"
    typical_tasks: [planning, design, implementation]
    size: medium
    priority: conditional
    description: "Strategy selection for implementation approaches (vertical/horizontal slicing)"


# Task Type to Rule Mapping
task_mappings:
  prd_creation:
    required:
      - "core/documentation-criteria"
    recommended:
      - "core/metacognition"

  implementation:
    required:
      - "language/rules"
      - "language/testing"  # TDD is mandatory
      - "core/ai-development-guide"
    recommended:
      - "core/metacognition"
    conditional:
      - "contextual/architecture/implementation-approach"  # For Medium/Large scale

  debugging:
    required:
      - "core/ai-development-guide"
      - "language/testing"
    recommended:
      - "language/rules"
      - "core/metacognition"

  design:
    required:
      - "core/documentation-criteria"
    conditional:
      - "contextual/architecture/implementation-approach"  # Required for Medium/Large scale (3+ files)

  documentation:
    required:
      - "core/documentation-criteria"

  refactoring:
    required:
      - "language/rules"
      - "language/testing"
      - "core/ai-development-guide"
    recommended:
      - "core/metacognition"

  research:
    recommended:
      - "core/metacognition"

  test_generation:
    required:
      - "language/testing"  # Test framework patterns and conventions
      - "core/documentation-criteria"  # Design document analysis
    recommended:
      - "core/metacognition"

# Scale-based Rule Loading
scale_mappings:
  small:  # 1-2 files
    load_immediately:
      - "language/rules"
    load_on_demand: []

  medium:  # 3-5 files
    load_immediately:
      - "language/rules"
      - "language/testing"  # TDD is mandatory
      - "core/documentation-criteria"
      - "contextual/architecture/implementation-approach"  # Required for approach selection
    load_on_demand:
      - "core/ai-development-guide"

  large:  # 6+ files
    load_immediately:
      - "core/documentation-criteria"
      - "contextual/architecture/implementation-approach"
    load_on_demand:
      - "language/rules"
      - "language/testing"
      - "core/ai-development-guide"

# Metadata for rule selection algorithm
selection_rules:
  - "Always load core/metacognition at session start"
  - "Load language/rules when any code modification is involved"
  - "Load language/testing for ALL implementation tasks (TDD mandatory)"
  - "Load implementation-approach for Medium/Large scale (3+ files)"
  - "Execute ALL quality check commands in VERIFY phase with 0 errors"
  - "Progressive loading: start with minimum, add as needed"
  - "Unload task-specific rules after task completion"